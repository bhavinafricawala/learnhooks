{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\My-Projects\\\\React-App\\\\learnhooks\\\\src\\\\ImageToggleOnScroll.js\";\nimport React, { useState, useRef, useEffect } from 'react';\n\nvar ImageToggleOnScroll = function ImageToggleOnScroll(prop) {\n  var imageRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  useEffect(function () {\n    window.addEventListener('scroll', scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return function () {\n      window.addEventListener('scroll', scrollHandler);\n    };\n  }, [isLoading]);\n  return isLoading ? null : React.createElement(\"img\", {\n    src: inView ? prop.secondaryImg : prop.primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    width: \"200\",\n    height: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["D:\\My-Projects\\React-App\\learnhooks\\src\\ImageToggleOnScroll.js"],"names":["React","useState","useRef","useEffect","ImageToggleOnScroll","prop","imageRef","inView","setInView","isLoading","setIsLoading","isInView","current","rect","getBoundingClientRect","top","bottom","window","innerHeight","scrollHandler","addEventListener","secondaryImg","primaryImg"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAU;AACpC,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;;AADoC,kBAGRD,QAAQ,CAAC,KAAD,CAHA;AAAA;AAAA,MAG7BM,MAH6B;AAAA,MAGrBC,SAHqB;;AAAA,mBAIFP,QAAQ,CAAC,KAAD,CAJN;AAAA;AAAA,MAI7BQ,SAJ6B;AAAA,MAIlBC,YAJkB;;AAMpC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIL,QAAQ,CAACM,OAAb,EAAsB;AACpB,UAAMC,IAAI,GAAGP,QAAQ,CAACM,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeC,MAAM,CAACC,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BX,IAAAA,SAAS,CAAC;AAAA,aAAMG,QAAQ,EAAd;AAAA,KAAD,CAAT;AACD,GAFD;;AAIAR,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,aAAlC;AACAX,IAAAA,SAAS,CAACG,QAAQ,EAAT,CAAT;AACAD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAO,YAAM;AACXO,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,aAAlC;AACD,KAFD;AAGD,GAPQ,EAON,CAACV,SAAD,CAPM,CAAT;AASA,SAAOA,SAAS,GAAG,IAAH,GACd;AACE,IAAA,GAAG,EAAEF,MAAM,GAAGF,IAAI,CAACgB,YAAR,GAAuBhB,IAAI,CAACiB,UADzC;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,GAAG,EAAEhB,QAHP;AAIE,IAAA,KAAK,EAAC,KAJR;AAKE,IAAA,MAAM,EAAC,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CApCD;;AAsCA,eAAeF,mBAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nconst ImageToggleOnScroll = (prop) => {\r\n  const imageRef = useRef(null);\r\n\r\n  const [inView, setInView] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const isInView = () => {\r\n    if (imageRef.current) {\r\n      const rect = imageRef.current.getBoundingClientRect();\r\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const scrollHandler = () => {\r\n    setInView(() => isInView());\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', scrollHandler);\r\n    setInView(isInView());\r\n    setIsLoading(false);\r\n    return () => {\r\n      window.addEventListener('scroll', scrollHandler);\r\n    };\r\n  }, [isLoading]);\r\n\r\n  return isLoading ? null : (\r\n    <img\r\n      src={inView ? prop.secondaryImg : prop.primaryImg}\r\n      alt=\"\"\r\n      ref={imageRef}\r\n      width=\"200\"\r\n      height=\"200\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ImageToggleOnScroll;\r\n"]},"metadata":{},"sourceType":"module"}